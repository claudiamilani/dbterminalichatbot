from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
import psycopg2

class ActionQueryBrands(Action):
    def name(self) -> str:
        return "action_query_brands"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: dict):
        try:
            # Connessione al database PostgreSQL
            with psycopg2.connect(
                host="pgsql",
                database="app",
                user="app",
                password="password",
                port=5432
            ) as conn:
                with conn.cursor() as cursor:
                    # Esecuzione della query per recuperare le marche pubblicate e certificate
                    cursor.execute("""
                        SELECT DISTINCT(V.NAME)
                        FROM TERMINALS T
                        JOIN ATTRIBUTE_VALUES AV ON T.ID = AV.TERMINAL_ID
                        JOIN DBT_ATTRIBUTES A ON AV.DBT_ATTRIBUTE_ID = A.ID
                        JOIN ATTR_CATEGORIES AC ON A.ATTR_CATEGORY_ID = AC.ID
                        JOIN VENDORS V ON T.VENDOR_ID = V.ID
                        WHERE T.PUBLISHED = TRUE 
                          AND T.CERTIFIED = TRUE 
                          AND A.PUBLISHED = TRUE
                          AND V.PUBLISHED = TRUE;
                    """)
                    
                    # Recupera i risultati e formatta la lista di marche
                    brands_query_results = cursor.fetchall()
                    brand_list = [brand[0] for brand in brands_query_results]
                    formatted_brands = "\n".join([f"- {brand}" for brand in brand_list])
                    
                    dispatcher.utter_message(
                        text=f"Seleziona una marca per visualizzare i modelli:\n{formatted_brands}"
                    )

        except psycopg2.Error as e:
            # Gestione degli errori di connessione o query
            dispatcher.utter_message(text="Errore nel recupero delle marche. Riprova più tardi.")
            print(f"Database error: {e}")

        return []


class ActionQueryModels(Action):
    def name(self) -> str:
        return "action_query_models"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: dict):
        # Estrai la marca scelta dall'utente
        device_make = tracker.get_slot("device_make")

        if not device_make:
            # Se non è stato selezionato un brand, inviamo un messaggio appropriato
            dispatcher.utter_message(text="Non è stata selezionata alcuna marca. Scegli prima una marca.")
            return []

        try:
            # Connessione al database PostgreSQL
            with psycopg2.connect(
                host="pgsql",
                database="app",
                user="app",
                password="password",
                port=5432
            ) as conn:
                with conn.cursor() as cursor:
                    # Esecuzione della query per recuperare i 15 modelli certificati e pubblicati
                    # per la marca specificata, ordinati per numero di TAC
                    cursor.execute("""
                        SELECT T.NAME
                        FROM TERMINALS T
                        JOIN ATTRIBUTE_VALUES AV ON T.ID = AV.TERMINAL_ID
                        JOIN DBT_ATTRIBUTES A ON AV.DBT_ATTRIBUTE_ID = A.ID
                        JOIN ATTR_CATEGORIES AC ON A.ATTR_CATEGORY_ID = AC.ID
                        JOIN VENDORS V ON T.VENDOR_ID = V.ID
                        JOIN TACS TA ON TA.TERMINAL_ID = T.ID
                        WHERE T.PUBLISHED = TRUE
                          AND T.CERTIFIED = TRUE
                          AND A.PUBLISHED = TRUE
                          AND V.NAME = %s
                        GROUP BY T.NAME
                        ORDER BY COUNT(TA.VALUE) DESC
                        LIMIT 15;
                    """, (device_make.upper(),))

                    # Recupera i risultati e formatta la lista dei modelli
                    models_query_results = cursor.fetchall()
                    model_list = [model[0] for model in models_query_results]

                    if model_list:
                        formatted_models = "\n".join([f"- {model}" for model in model_list])
                        dispatcher.utter_message(
                            text=f"Modelli più venduti per {device_make.upper()}:\n{formatted_models}"
                        )
                    else:
                        dispatcher.utter_message(
                            text=f"Non ci sono modelli trovati per la marca {device_make}."
                        )

        except psycopg2.Error as e:
            # Gestione degli errori di connessione o query
            dispatcher.utter_message(text="Errore nel recupero dei modelli. Riprova più tardi.")
            print(f"Database error: {e}")

        return []

