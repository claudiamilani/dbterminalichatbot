// Genera un ID fisso una sola volta all'inizio.
// Puoi anche usare Math.random() o un timestamp unico, ma SOLO UNA VOLTA.
const senderId = "user_static_id";

// Funzione principale per inviare il messaggio all'API di Rasa e ricevere la risposta
async function sendMessageToRasa(message) {
    console.log("Invio messaggio a Rasa:", message);

    // Prepara i dati da inviare a Rasa
    const data = {
        sender: senderId,
        message: message
    };

    try {
        const response = await fetch('http://localhost:5005/webhooks/rest/webhook', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        // Ottieni la risposta JSON da Rasa
        const rasaResponse = await response.json();
        console.log("Risposta Rasa grezza:", rasaResponse);

        // Gestisce la risposta di Rasa, inclusi i pulsanti
        handleRasaResponse(rasaResponse);
    } catch (error) {
        console.error('Errore durante la comunicazione con Rasa:', error);
    }
}

// Funzione per gestire la risposta di Rasa e renderizzare messaggi e pulsanti
function handleRasaResponse(messages) {
    const responseContainer = document.querySelector(".messages");

    messages.forEach(message => {
        console.log("Messaggio Rasa:", message);

        // Se c'è del testo
        if (message.text) {
            const messageElement = document.createElement('li');
            messageElement.classList.add('bot-message');
            messageElement.innerHTML = message.text.replace(/\n/g, "<br>");
            responseContainer.appendChild(messageElement);
        }

        // Se ci sono pulsanti
        if (message.buttons) {
            console.log("Pulsanti ricevuti:", message.buttons);
            message.buttons.forEach(button => {
                const buttonElement = document.createElement('button');
                buttonElement.innerText = button.title;
                buttonElement.classList.add('bot-button');
                buttonElement.onclick = () => {
                    console.log("Click pulsante, invio payload:", button.payload);
                    sendMessageToRasa(button.payload);
                };
                responseContainer.appendChild(buttonElement);
            });
        }

        // Se c'è un messaggio custom con tipo popup
        if (message.custom && message.custom.type === "popup" && message.custom.link) {
            console.log("Popup richiesto:", message.custom.link);
            openPopup(message.custom.link);
        }
    });

    scrollToBottom();
}

// Funzione per gestire lo scroll verso il basso
function scrollToBottom() {
    const chatBox = document.getElementById("chat-box");
    if (chatBox) {
        chatBox.scrollTop = chatBox.scrollHeight;
    }
}

// Funzione per aprire un popup (nuova finestra)
function openPopup(link) {
    const popup = window.open(link, "_blank", "width=800,height=600,resizable=yes,scrollbars=yes");
    if (!popup || popup.closed || typeof popup.closed === 'undefined') {
        alert("Popup bloccato dal browser. Abilita i popup per questo sito.");
    }
}

// Gestione del pulsante "Invia"
document.getElementById('send-btn').addEventListener('click', () => {
    const userInput = document.getElementById('user-input');
    const userMessage = userInput.value.trim();

    if (userMessage) {
        const userMessageElement = document.createElement('li');
        userMessageElement.classList.add('user-message');
        userMessageElement.textContent = userMessage;
        document.querySelector(".messages").appendChild(userMessageElement);
        scrollToBottom();

        sendMessageToRasa(userMessage);
        userInput.value = '';
    }
});

// Aggiunge un listener per inviare il messaggio premendo "Enter"
document.getElementById('user-input').addEventListener('keypress', (event) => {
    if (event.key === 'Enter') {
        document.getElementById('send-btn').click();
    }
});

